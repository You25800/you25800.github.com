import{_ as l,D as p,o,c as D,z as s,a,G as e,R as t}from"./chunks/framework.333b51ca.js";const E=JSON.parse('{"title":"抽象语法树 go/ast 库使用","description":"","frontmatter":{},"headers":[],"relativePath":"golang/tool/抽象语法树ast库使用.md","filePath":"golang/tool/抽象语法树ast库使用.md","lastUpdated":1684585042000}'),c={name:"golang/tool/抽象语法树ast库使用.md"},C=s("h1",{id:"抽象语法树-go-ast-库使用",tabindex:"-1"},[a("抽象语法树 go/ast 库使用 "),s("a",{class:"header-anchor",href:"#抽象语法树-go-ast-库使用","aria-label":'Permalink to "抽象语法树 go/ast 库使用"'},"​")],-1),r=s("h2",{id:"推荐背景",tabindex:"-1"},[a("推荐背景 "),s("a",{class:"header-anchor",href:"#推荐背景","aria-label":'Permalink to "推荐背景"'},"​")],-1),y=s("p",null,"Go 语言在编译过程中经过词法分析和语法分析之后，就到了抽象语法树的构建阶段，经历这一阶段之后，语句就真正组织成了程序代码。利用抽象语法树解析库，我们可以完成代码的自动化分析和自动化生成，因此通常用于做一些自动化的工具，例如 wire。",-1),F=s("code",null,"<Badge />",-1),A=t("",35);function i(d,u,m,h,g,f){const n=p("Badge");return o(),D("div",null,[C,r,y,s("p",null,[a("这是默认主题内置的 "),F,a(" 组件 "),e(n,{text:"演示"})]),A])}const b=l(c,[["render",i]]);export{E as __pageData,b as default};
