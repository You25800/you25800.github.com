import{_ as e,D as t,o as c,c as r,z as p,a as s,G as n,B as l,R as o}from"./chunks/framework.318fa179.js";const v=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/基础类型.md","filePath":"vue/typescript/基础类型.md","lastUpdated":1692608566000}'),y={name:"vue/typescript/基础类型.md"},C=o("",14),D=o("",7),F=o("",7),A=o("",8),i=o("",33);function d(u,h,g,m,b,E){const a=t("font");return c(),r("div",null,[C,p("p",null,[s("这与下面定义 "),n(a,{color:"red"},{default:l(()=>[s("sentence")]),_:1}),s(" 的方式效果相同：")]),D,p("p",null,[s("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为 "),n(a,{color:"red"},{default:l(()=>[s("string")]),_:1}),s(" 和 "),n(a,{color:"red"},{default:l(()=>[s("number")]),_:1}),s(" 类型的元组。")]),F,n(a,{color:"red"},{default:l(()=>[s("enum")]),_:1}),s(" 类型是对JavaScript标准数据类型的一个补充。像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。"),A,p("p",null,[s("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 "),n(a,{color:"red"},{default:l(()=>[s("any")]),_:1}),s(" 类型来标记这些变量：")]),i])}const _=e(y,[["render",d]]);export{v as __pageData,_ as default};
