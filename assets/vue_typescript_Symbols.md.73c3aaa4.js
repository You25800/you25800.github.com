import{_ as s,o as a,c as o,R as l}from"./chunks/framework.318fa179.js";const b=JSON.parse('{"title":"Symbols","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/Symbols.md","filePath":"vue/typescript/Symbols.md","lastUpdated":1694392708000}'),n={name:"vue/typescript/Symbols.md"},e=l('<h1 id="symbols" tabindex="-1">Symbols <a class="header-anchor" href="#symbols" aria-label="Permalink to &quot;Symbols&quot;">​</a></h1><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可选的字符串key</span></span></code></pre></div><p>Symbols是不可改变且唯一的。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">sym2 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> sym3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false, symbols是唯一的</span></span></code></pre></div><p>像字符串一样，symbols也可以被用做对象属性的键。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">sym</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj[sym])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;value&quot;</span></span></code></pre></div><p>Symbols也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getClassNameSymbol </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    [getClassNameSymbol]</span><span style="color:#89DDFF;">(){</span></span>\n<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c[getClassNameSymbol]()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;C&quot;</span></span></code></pre></div><h1 id="众所周知的symbols" tabindex="-1">众所周知的Symbols <a class="header-anchor" href="#众所周知的symbols" aria-label="Permalink to &quot;众所周知的Symbols&quot;">​</a></h1><p>除了用户定义的symbols，还有一些已经众所周知的内置symbols。 内置symbols用来表示语言内部的行为。</p><p>以下为这些symbols的列表：</p><h2 id="symbol-hasinstance" tabindex="-1"><code>Symbol.hasInstance</code> <a class="header-anchor" href="#symbol-hasinstance" aria-label="Permalink to &quot;`Symbol.hasInstance`&quot;">​</a></h2><p>方法，会被<code>instanceof</code>运算符调用。构造器对象用来识别一个对象是否是其实例。</p><h2 id="symbol-isconcatspreadable" tabindex="-1"><code>Symbol.isConcatSpreadable</code> <a class="header-anchor" href="#symbol-isconcatspreadable" aria-label="Permalink to &quot;`Symbol.isConcatSpreadable`&quot;">​</a></h2><p>布尔值，表示当在一个对象上调用<code>Array.prototype.concat</code>时，这个对象的数组元素是否可展开。</p><h2 id="symbol-iterator" tabindex="-1"><code>Symbol.iterator</code> <a class="header-anchor" href="#symbol-iterator" aria-label="Permalink to &quot;`Symbol.iterator`&quot;">​</a></h2><p>方法，被<code>for-of</code>语句调用。返回对象的默认迭代器。</p><h2 id="symbol-match" tabindex="-1"><code>Symbol.match</code> <a class="header-anchor" href="#symbol-match" aria-label="Permalink to &quot;`Symbol.match`&quot;">​</a></h2><p>方法，被<code>String.prototype.match</code>调用。正则表达式用来匹配字符串。</p><h2 id="symbol-replace" tabindex="-1"><code>Symbol.replace</code> <a class="header-anchor" href="#symbol-replace" aria-label="Permalink to &quot;`Symbol.replace`&quot;">​</a></h2><p>方法，被<code>String.prototype.replace</code>调用。正则表达式用来替换字符串中匹配的子串。</p><h2 id="symbol-search" tabindex="-1"><code>Symbol.search</code> <a class="header-anchor" href="#symbol-search" aria-label="Permalink to &quot;`Symbol.search`&quot;">​</a></h2><p>方法，被<code>String.prototype.search</code>调用。正则表达式返回被匹配部分在字符串中的索引。</p><h2 id="symbol-species" tabindex="-1"><code>Symbol.species</code> <a class="header-anchor" href="#symbol-species" aria-label="Permalink to &quot;`Symbol.species`&quot;">​</a></h2><p>函数值，为一个构造函数。用来创建派生对象。</p><h2 id="symbol-split" tabindex="-1"><code>Symbol.split</code> <a class="header-anchor" href="#symbol-split" aria-label="Permalink to &quot;`Symbol.split`&quot;">​</a></h2><p>方法，被<code>String.prototype.split</code>调用。正则表达式来用分割字符串。</p><h2 id="symbol-toprimitive" tabindex="-1"><code>Symbol.toPrimitive</code> <a class="header-anchor" href="#symbol-toprimitive" aria-label="Permalink to &quot;`Symbol.toPrimitive`&quot;">​</a></h2><p>方法，被<code>ToPrimitive</code>抽象操作调用。把对象转换为相应的原始值。</p><h2 id="symbol-tostringtag" tabindex="-1"><code>Symbol.toStringTag</code> <a class="header-anchor" href="#symbol-tostringtag" aria-label="Permalink to &quot;`Symbol.toStringTag`&quot;">​</a></h2><p>方法，被内置方法<code>Object.prototype.toString</code>调用。返回创建对象时默认的字符串描述。</p><h2 id="symbol-unscopables" tabindex="-1"><code>Symbol.unscopables</code> <a class="header-anchor" href="#symbol-unscopables" aria-label="Permalink to &quot;`Symbol.unscopables`&quot;">​</a></h2><p>对象，它自己拥有的属性会被<code>with</code>作用域排除在外。</p>',36),p=[e];function t(c,r,y,i,d,m){return a(),o("div",null,p)}const C=s(n,[["render",t]]);export{b as __pageData,C as default};
