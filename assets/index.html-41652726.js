import{_ as d,r as l,o as t,c as o,a,b as e,d as n,e as i}from"./app-aae02a9f.js";const c={},r=a("h1",{id:"git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),e(" GIT")],-1),p=a("h2",{id:"安装配置",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#安装配置","aria-hidden":"true"},"#"),e(" 安装配置")],-1),h={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>安装后通过以下命令查看，显示版本号表示安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="图形界面管理软件" tabindex="-1"><a class="header-anchor" href="#图形界面管理软件" aria-hidden="true">#</a> 图形界面管理软件</h3>`,3),g=a("code",null,"sourcetree",-1),b={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},m=i(`<div class="custom-container warning"><p class="custom-container-title">注意</p><p>新人建议直接通使用命令行管理GIT</p></div><h3 id="初始配置" tabindex="-1"><a class="header-anchor" href="#初始配置" aria-hidden="true">#</a> 初始配置</h3><p>配置文件为<code>~/gitconfig</code>，执行任何Git配置命令后文件将自动创建。</p><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次git提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;thomas@163.com&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;thomas&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础入门" tabindex="-1"><a class="header-anchor" href="#基础入门" aria-hidden="true">#</a> 基础入门</h2><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><ol><li>初始化新仓库 <code>git init</code></li><li>克隆代码 <code>git clone https://github.com/gorilla/websocket.git</code></li><li>克隆指定分支 <code>git clone -b dev git@github.com:gorilla/websocket.git</code></li><li>查看状态 <code>git status</code></li><li>提交单个文件 <code>git add main.go</code></li><li>提交所有文件 <code>git add -A</code></li><li>使用通配符提交 <code>git add *.js</code></li><li>提交到仓库中 <code>git commit -m &#39;提交信息&#39;</code></li><li>提交已经跟踪过的文件，不需要执行add <code>git commit -a -m &#39;提交信息&#39;</code></li><li>删除版本库与项目目录中的文件 <code>git rm main.go</code></li><li>只删除版本库中文件但保存项目目录中文件 <code>git rm --cached main.go</code></li><li>修改最后一次提交 <code>git commit --amend</code></li></ol><h3 id="基础流程" tabindex="-1"><a class="header-anchor" href="#基础流程" aria-hidden="true">#</a> 基础流程</h3><ol><li><p>首先克隆你的项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/test/test.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建新文件main.go，查看没有被管理的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clean <span class="token parameter variable">-n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将所有文件提交到暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>不小心将工作区中的main.go 文件删除了，可以将暂存区中的main.go恢复回来</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将文件提交到本地仓库，并使用 -m 选项说明完成的工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;完成。。。&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将代码提交到远程服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="工作区" tabindex="-1"><a class="header-anchor" href="#工作区" aria-hidden="true">#</a> 工作区</h2><p>git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件</p><ol><li><code>git clean -n</code> 告诉你哪些文件没有被跟踪，会被删除。</li><li><code>git clean -f</code> 删除当前目录下没有trached过的文件，不会删除<code>.gitignore</code>指定的文件</li><li><code>git clean -df</code> 删除当前目录下没有被tracked过的文件和文件夹</li><li><code>git checkout .</code> 将没有放入暂存区的所有文件恢复</li><li><code>git checkout main.go</code> 放弃指定文件的修改</li><li><code>git checkout -- main.go</code> 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近版本）</li></ol><h2 id="暂存区" tabindex="-1"><a class="header-anchor" href="#暂存区" aria-hidden="true">#</a> 暂存区</h2><ol><li><code>git add .</code> 提交所有修改和新增的文件</li><li><code>git add -u</code> 只提交修改文件不提交新文件</li><li><code>git ls-files -s</code> 查看暂存区文件列表</li><li><code>git cat-file -p 6e9a94</code> 查看暂存区文件内容</li><li><code>git reset</code> 撤销上次提交到暂存区动作</li></ol><h2 id="日志查看" tabindex="-1"><a class="header-anchor" href="#日志查看" aria-hidden="true">#</a> 日志查看</h2><ol><li><p><code>git log</code>查看日志</p></li><li><p><code>git log -p -2</code> 查看最近2次提交日志并显示文件差异</p></li><li><p><code>git log --name-only</code> 显示已修改的文件清单</p></li><li><p><code>git log --name-status</code> 显示新增、修改、删除的文件清单</p></li><li><p><code>git log --oneline</code> 一行显示并只显示SHA-1的前几个字符</p></li><li><p>下面是自定义的精简日志信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;</span> --abbrev-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以在<code>～/.zshrc</code>配置文件中定义别名使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">gitlog</span><span class="token operator">=</span><span class="token string">&quot;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>* 7a9e5751 - <span class="token punctuation">(</span>origin/master<span class="token punctuation">)</span> 初始化vuepress仓库 <span class="token punctuation">(</span><span class="token number">3</span> months ago<span class="token punctuation">)</span> <span class="token operator">&lt;</span>thomas<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p>分支用于为项目增加新功能或修复Bug时使用</p><h3 id="分支流程" tabindex="-1"><a class="header-anchor" href="#分支流程" aria-hidden="true">#</a> 分支流程</h3><p>大部分情况下不会直接在master分支工作，我们应该保护这个分支是最终开发完成代码健康可交付运行的。</p><p>所以功能和缺陷（bug）修复都会新建分支完成，除了这个概念外与基本流程使用是一样的。</p><ol><li><p>新建支付功能开发分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch pay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>切换到新分支开始开发，这里的工作内容与上面的基础流程是一样的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout pay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开发完成执行提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;支付功能&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>合并分支到master</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到master分支</span>
<span class="token function">git</span> checkout master

<span class="token comment"># 合并pay分支的代码</span>
<span class="token function">git</span> merge pay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提交代码到远程仓库master分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1" aria-hidden="true">#</a> 常用命令</h3><ol><li><p><code>git branch dev</code> 创建分支</p></li><li><p><code>git branch</code> 查看分支</p></li><li><p><code>git checkout dev</code> 切换分支</p></li><li><p><code>git checkout -b thomas</code> 创建并切换分支</p></li><li><p><code>git branch -m thomas main</code> 将分支thomas更新为main</p></li><li><p>合并dev分支到master</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master
<span class="token function">git</span> merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>git branch -d dev</code> 删除分支</p></li><li><p><code>git branch -D dev</code> 删除没有合并的分支</p></li><li><p><code>git push origin :dev</code> 删除远程分支</p></li><li><p><code>git branch --no-merged</code> 查看未合并的分支（切换到master）</p></li><li><p><code>git branch --merged</code> 查看已经合并的分支（切换到master）</p></li></ol><h3 id="历史版本" tabindex="-1"><a class="header-anchor" href="#历史版本" aria-hidden="true">#</a> 历史版本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 首先查看历史版本提交日志</span>
<span class="token function">git</span> log
<span class="token comment"># 切换到提交的commitId历史版本</span>
<span class="token function">git</span> checkout a5a0d2012be8939bb3505f2c10062458d74d0bfc
<span class="token comment"># 以历史版本commitId创建新分支</span>
<span class="token function">git</span> checkout a5a0d2012be8939bb3505f2c10062458d74d0bfc <span class="token parameter variable">-b</span> 新分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset</h2><p>使用reset恢复到历史提交点，重置暂存区与工作目录的内容。</p><h3 id="可选参数" tabindex="-1"><a class="header-anchor" href="#可选参数" aria-hidden="true">#</a> 可选参数</h3><p>reset 有三个选项可使用</p><ol><li>--hard 重置位置的同时，直接将<strong>working Tree 工作目录</strong>、<strong>index暂存区</strong>及 <strong>repository</strong> 都重置成目标reset的节点的内容。</li><li>--sort 重置位置的同时，保留<strong>working tree 工作目录</strong>和<strong>index暂存区</strong>的内容，只让<strong>repository</strong>中的内容和<strong>reset</strong>目标节点保持一致。</li><li>--mixed（默认）重置位置的同时，只保留<strong>working tree工作目录</strong>的内容，但会将<strong>index暂存区</strong>和<strong>repository</strong>中的内容更改reset目标节点一致。</li></ol><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><ol><li><code>git reset</code>将add到暂存区的内容回退</li><li><code>git reset --hard b7545585454s4d554s45s4</code> 恢复到指定提交版本（先通过git log 查看版本号），重置stage区和工作目录里的内容。</li><li><code>git reset --hard HEAD^^^</code>恢复前三个版本</li><li><code>git reset --soft</code> 保留工作区的内容，只回退commit的动作。保留working tree工作目录的内容，index暂存区与working tree工作目录的内容一致，只是仓库repository中的内容的改变。</li><li><code>git reset HEAD -- .</code>撤销暂存区的文件。</li><li><code>git reset --hard</code>清空工作区和暂存区的改动。</li><li><code>git reset HEAD hd.js</code>放弃已经add暂存区的文件 hd.js</li></ol><h2 id="其他知识" tabindex="-1"><a class="header-anchor" href="#其他知识" aria-hidden="true">#</a> 其他知识</h2><h3 id="定义别名" tabindex="-1"><a class="header-anchor" href="#定义别名" aria-hidden="true">#</a> 定义别名</h3><p>通过创建命令别名可以减少命令输入量，有几种方式进行设置</p><h4 id="配置文件定义" tabindex="-1"><a class="header-anchor" href="#配置文件定义" aria-hidden="true">#</a> 配置文件定义</h4><p>修改配置文件～/.gitconfig并添加以下命令别名配置段</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>
	a <span class="token operator">=</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
	c <span class="token operator">=</span> commit
	s <span class="token operator">=</span> status
	l <span class="token operator">=</span> log
	b <span class="token operator">=</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以使用<code>git a</code>实现<code>git add .</code>一样的效果了。</p><h4 id="系统配置定义" tabindex="-1"><a class="header-anchor" href="#系统配置定义" aria-hidden="true">#</a> 系统配置定义</h4><p>window 用户可以修改<code>~/.bashrc</code>或<code>~/.bash_profile</code>文件。</p><p>mac/linux 修改 <code>~/.zshrc</code>文件中定义常用的别名指令，需要首先安装zsh命令行扩展</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">gs</span><span class="token operator">=</span><span class="token string">&quot;git status&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gc</span><span class="token operator">=</span><span class="token string">&quot;git commit -m&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gl</span><span class="token operator">=</span><span class="token string">&quot;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gb</span><span class="token operator">=</span><span class="token string">&quot;git branch&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ga</span><span class="token operator">=</span><span class="token string">&quot;git add -A&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">go</span><span class="token operator">=</span><span class="token string">&quot;git checkout&quot;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gp</span><span class="token operator">=</span><span class="token string">&quot;git push;git push github&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行直接使用<code>gs</code> 即可以实现<code>git status</code>一样的效果了。</p><blockquote><p>window系统需要使用 git for window 中的<code>Git Base</code>软件</p></blockquote><h3 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> .gitignore</h3><p>.gitignore 用于忽略提交的文件</p><ul><li>所有空行或者以注释符号<code>#</code>开头的行都会被git忽略</li><li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录</li><li>可以使用标准的glob模式匹配。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.idea
/vendor
.env
*.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="冲突解决" tabindex="-1"><a class="header-anchor" href="#冲突解决" aria-hidden="true">#</a> 冲突解决</h3><p>不同分支修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。</p><ol><li>使用编辑器修改冲突的文件</li><li>添加暂存<code>git add .</code>表示已经解决冲突</li><li>git commit 提交完成</li></ol><h3 id="stashing" tabindex="-1"><a class="header-anchor" href="#stashing" aria-hidden="true">#</a> Stashing</h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则你以后无法回到这个工作点。</p><p>“暂存”可以获取你工作目录的中间状态----也就是你修改过的被追踪的文件和暂存的变更----并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><ol><li>储藏工作 <code>git stash</code></li><li>查看储藏列表<code>git stash list</code></li><li>应用最近的储藏<code>git stash apply</code></li><li>应用更早的储藏<code>git stash apply stash@{2}</code></li><li>删除储藏<code>git stash dorp stash@{0}</code></li><li>应用并删除储藏 <code>git stash pop</code></li></ol><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> Tag</h3><p>Git 也可以对某一时间点上的版本打上标签，用于发布软件版本如v1.0</p><ol><li>添加标签<code>git tag v1.0</code></li><li>列出标签<code>git tag</code></li><li>推送标签<code>git push --tags</code></li><li>删除标签<code>git tag -d v1.0</code></li><li>删除远程标签<code>git push origin :v1.0</code></li></ol><h3 id="打包发布" tabindex="-1"><a class="header-anchor" href="#打包发布" aria-hidden="true">#</a> 打包发布</h3><p>对master 分支代码生成压缩包供使用者下载使用，<code>--prefix</code>指定目录名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> archive master <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">&#39;download/&#39;</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>zip <span class="token operator">&gt;</span> master.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><p>你需要在<code>Github</code>、码云等，先创建好仓库。</p><h3 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> SSH</h3><h4 id="生成密钥" tabindex="-1"><a class="header-anchor" href="#生成密钥" aria-hidden="true">#</a> 生成密钥</h4><p>使用ssh连接Github发送指令更加安全可靠，也可以免掉每次输入密码的困扰。</p><p>在命令行中输入以下代码（windows用户使用Git Bash）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh-keygen -t rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一直按回车键直到结束。系统会在<code>~/.ssh</code>目录中生成<code>id_rsa</code>和<code>id_rsa.pub</code>，即私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。</p><p>向 Github 等仓库，添加<code>id_rsa.pub</code>公钥内容。</p><h3 id="关联远程" tabindex="-1"><a class="header-anchor" href="#关联远程" aria-hidden="true">#</a> 关联远程</h3><ol><li><p>创建本地库并完成初始提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;# test&quot;</span> <span class="token operator">&gt;&gt;</span> README.md
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;first commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:mahongyi/test.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看远程库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>推送数据到远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除远程仓库关联</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">rm</span> origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><blockquote><p>通过clone克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。</p></blockquote><h3 id="pull" tabindex="-1"><a class="header-anchor" href="#pull" aria-hidden="true">#</a> pull</h3><p>拉取远程主机某个分支的更新，再与本地的指定分支合并。</p><ol><li>拉取 origin 主机的 ask 分支与本地的 master 分支合并 <code>git pull origin ask:ask</code></li><li>拉取 origin 主机的 ask 分支与当前分支合并 <code>git pull origin ask</code></li><li>如果远程分支与当前本地分支同名直接执行 <code>git pull</code></li></ol><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相似。</p><ol><li><p>将当前分支推送到<code>origin</code>主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用<code>-u</code>选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除远程<code>ask</code>分支 <code>git push origin --delete ask</code></p></li><li><p>本地 ask 分支关联远程分支并推送 <code>git push --set-upstream origin ask</code></p></li></ol><h3 id="多库提交" tabindex="-1"><a class="header-anchor" href="#多库提交" aria-hidden="true">#</a> 多库提交</h3>`,84),v={href:"https://gitee.com/houdunren/code",target:"_blank",rel:"noopener noreferrer"},k=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 增加一个远程库</span>
<span class="token function">git</span> remote <span class="token function">add</span> github git@github.com:mahongyi/test1.git

<span class="token comment"># 提交到远程库</span>
<span class="token function">git</span> push github
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在<code>~/.zshrc</code> 文件中定义别名，下面是定义的别名。这时使用 gp 将同时提供到 github 与 gitee</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">gp</span><span class="token operator">=</span><span class="token string">&quot;git push &amp; git push github&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function f(x,_){const s=l("ExternalLinkIcon");return t(),o("div",null,[r,p,a("p",null,[e("Git 可以在windows、mac、linux 全平台系统使用。登录 "),a("a",h,[e("https://git-scm.com/"),n(s)]),e(" 下载你系统的Git软件并进行安装。")]),u,a("p",null,[e("推荐使用"),g,e("，功能强大、跨平台、免费，下载地址 "),a("a",b,[e("https://www.sourcetreeapp.com/"),n(s)])]),m,a("p",null,[e("我可以将代码提交到多个远程版本库中，比如后盾人的 "),a("a",v,[e("课程代码 (opens new window)"),n(s)]),e("就提交到了 Github 与 Gitee 两个库中。")]),k])}const q=d(c,[["render",f],["__file","index.html.vue"]]);export{q as default};
