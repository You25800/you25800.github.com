import{_ as s,o as a,c as n,R as l}from"./chunks/framework.333b51ca.js";const F=JSON.parse('{"title":"PostgreSQL FETCH 用法与实例","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/base/FETCH.md","filePath":"database/postgreSQL/base/FETCH.md","lastUpdated":1688717707000}'),p={name:"database/postgreSQL/base/FETCH.md"},e=l(`<h1 id="postgresql-fetch-用法与实例" tabindex="-1">PostgreSQL FETCH 用法与实例 <a class="header-anchor" href="#postgresql-fetch-用法与实例" aria-label="Permalink to &quot;PostgreSQL FETCH 用法与实例&quot;">​</a></h1><p>本文介绍了在 PostgreSQL 中如何在 <code>SELECT</code> 语句中使用 <code>FETCH</code> 子句限定查询返回的行数。</p><p>在 PostgreSQL 中，您可以在 <code>SELECT</code> 语句中使用 <code>FETCH</code> 子句来限定返回的行的数量以节省系统的开销。</p><p><code>FETCH</code> 子句与 <a href="./LIMIT.html"><code>LIMIT</code></a> 子句作用相同，但是 <code>FETCH</code> 子句是 SQL 标准，而 <code>LIMIT</code> 子句不是 SQL 标准。</p><h2 id="postgresql-fetch语法" tabindex="-1">PostgreSQL FETCH语法 <a class="header-anchor" href="#postgresql-fetch语法" aria-label="Permalink to &quot;PostgreSQL FETCH语法&quot;">​</a></h2><p>要使用<code>FETCH</code>子句限制返回的行数，请按照如下语法形式使用它：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> { </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> | </span><span style="color:#F78C6C;">NEXT</span><span style="color:#A6ACCD;"> } [ rows_count ] { </span><span style="color:#F78C6C;">ROW</span><span style="color:#A6ACCD;"> | </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> } ONLY</span></span></code></pre></div><p>这里：</p><ul><li>您可以使用 <code>FIRST</code>和<code>NEXT</code> 中的任意一个，他们的含义相同。</li><li>您可以使用 <code>ROW</code>和<code>ROWS</code> 中的任意一个，他们的含义相同。</li><li><code>rows_count</code>是要限制的行数，即返回的最大的行数。它是可选的，默认值为1。您应该为<code>rows_count</code>指定一个大于0的整数值。</li></ul><p>带有 <code>FITCH</code> 子句的 <code>SELECT</code> 语句完整用法如下：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> column_list</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name</span></span>
<span class="line"><span style="color:#A6ACCD;">[other_clauses]</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> rows_count;</span></span></code></pre></div><p>其中，other_clauses是那些可以想起SELECT语句中使用的其他子句，比如<a href="./WHERE.html">WHERE</a>,<a href="./ORDER_BY.html">ORDER BY</a>,<a href="./OFFSET.html">OFFSET</a>等</p><p>通常，您需要在带有FETCH子句的SELECT语句中一同使用ORDER BY子句，这样您可以得到一个按照指定的顺序排序的结果集。这是一个好的实践。</p><p>在一些分页的查询的应用中，您需要在SELECT语句结合使用<a href="./OFFSET.html">OFFSET</a>子句和FETCH子句。如下：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> column_list</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#A6ACCD;">OFFSET skipped_rows</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> rows_count </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><p>比如:</p><ul><li>第一页可以使用： <code>OFFSET 0 FETCH FIRST 10 ROWS ONLY</code> 表示最多返回 10 行。</li><li>第二页可以使用： <code>OFFSET 10 FETCH FIRST 10 ROWS ONLY</code> 表示跳过第一页的 10 行后最多返回 10 行。</li><li>第三页可以使用： <code>OFFSET 20 FETCH FIRST 10 ROWS ONLY</code> 表示跳过前两页的 20 行后最多返回 10 行。</li><li>以此类推…</li></ul><h2 id="postgresql-fetch-实例" tabindex="-1">PostgreSQL FETCH 实例 <a class="header-anchor" href="#postgresql-fetch-实例" aria-label="Permalink to &quot;PostgreSQL FETCH 实例&quot;">​</a></h2><p>我们将使用 <a href="/database/sakila/">Sakila 示例数据库</a> 中的表进行演示，请您先<a href="./示例数据库.html">在 PostgreSQL 中安装 Sakila 示例数据库</a>。</p><p>在 Sakila 示例数据库中， <a href="/database/sakila/影片表.html"><code>film</code> 表</a>存储了一个 DVD 商店中的可以租赁的所有的影片。</p><h3 id="使用-postgresql-fetch-限制返回行数示例" tabindex="-1">使用 PostgreSQL FETCH 限制返回行数示例 <a class="header-anchor" href="#使用-postgresql-fetch-限制返回行数示例" aria-label="Permalink to &quot;使用 PostgreSQL FETCH 限制返回行数示例&quot;">​</a></h3><p>要限制从 <code>film</code> 表查询时最多返回 5 行，请使用下面的带有 <code>FETCH</code> 子句的 <code>SELECT</code> 语句：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span></span>
<span class="line"><span style="color:#A6ACCD;">  film_id,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title,</span></span>
<span class="line"><span style="color:#A6ACCD;">  release_year</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> film_id</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">film_id |      title       | release_year</span></span>
<span class="line"><span style="color:#A6ACCD;">---------+------------------+--------------</span></span>
<span class="line"><span style="color:#A6ACCD;">       1 | ACADEMY DINOSAUR |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       2 | ACE GOLDFINGER   |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       3 | ADAPTATION HOLES |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       4 | AFFAIR PREJUDICE |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       5 | AFRICAN EGG      |         2006</span></span></code></pre></div><h3 id="使用-postgresql-fetch-获取前-n-行" tabindex="-1">使用 PostgreSQL FETCH 获取前 N 行 <a class="header-anchor" href="#使用-postgresql-fetch-获取前-n-行" aria-label="Permalink to &quot;使用 PostgreSQL FETCH 获取前 N 行&quot;">​</a></h3><p>通常，您经常使用 <code>FETCH</code> 子句从表中选择具有最高或最低值的行。</p><p>例如，要获得租金最高的 10 部电影，您可以按租金降序对电影进行排序，然后使用 <code>FETCH</code> 子句获得前 10 部电影。您可以通过以下查询达到这个目的：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span></span>
<span class="line"><span style="color:#A6ACCD;">  film_id,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title,</span></span>
<span class="line"><span style="color:#A6ACCD;">  rental_rate</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> rental_rate </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;">, film_id</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><p>查询结果如下：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">film_id |        title         | rental_rate</span></span>
<span class="line"><span style="color:#A6ACCD;">---------+----------------------+-------------</span></span>
<span class="line"><span style="color:#A6ACCD;">       2 | ACE GOLDFINGER       |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">       7 | AIRPLANE SIERRA      |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">       8 | AIRPORT POLLOCK      |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      10 | ALADDIN CALENDAR     |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      13 | ALI FOREVER          |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      20 | AMELIE HELLFIGHTERS  |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      21 | AMERICAN CIRCUS      |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      28 | ANTHEM LUKE          |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      31 | APACHE DIVINE        |        4.99</span></span>
<span class="line"><span style="color:#A6ACCD;">      32 | APOCALYPSE FLAMINGOS |        4.99</span></span></code></pre></div><p>这里，为了获取租金最高的 10 不影片，我们使用了 <code>ORDER BY rental_rate DESC, film_id</code> 子句对影片按照租金逆序排序，并使用 <code>FETCH FIRST 10 ROWS ONLY</code> 子句获取前 10 行。</p><h3 id="使用-postgresql-fetch-和-offset-分页查询示例" tabindex="-1">使用 PostgreSQL FETCH 和 OFFSET 分页查询示例 <a class="header-anchor" href="#使用-postgresql-fetch-和-offset-分页查询示例" aria-label="Permalink to &quot;使用 PostgreSQL FETCH 和 OFFSET 分页查询示例&quot;">​</a></h3><p><code>film</code> 表中共有 1000 行关于影片的信息。您可以通过以下带有 <a href="./COUNT.html"><code>COUNT(*)</code></a> 表达式的 <code>SELECT</code> 语句得到验证：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film;</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#A6ACCD;">-------</span></span>
<span class="line"><span style="color:#A6ACCD;">  1000</span></span></code></pre></div><p>假设你有一个系统需要在前端展示所有的影片信息，将 1000 行信息全部展示在一页上并不是一个好的方案。因为这个方案如下的缺点：</p><ul><li>数据库性能。 一个语句中返回大量的数据会带给数据库服务器更大的内存开销和 IO 消耗。</li><li>应用性能。大量的数据会导致应用占用更大的内存，甚至回导致应用卡顿、卡死。</li><li>用户的体验。用户面对大量的数据会眩晕。</li></ul><p>一个更好的方案是分页显示所有的影片。您可以很轻松地使用 带有 <code>FETCH</code> 和 <code>OFFSET</code> 子句的 <code>SELECT</code> 语句实现分页查询。</p><p>假设您需要每页显示 10 个影片信息，那么您可以使用如下的语句获取第一页的所有行：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span></span>
<span class="line"><span style="color:#A6ACCD;">  film_id,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title,</span></span>
<span class="line"><span style="color:#A6ACCD;">  release_year</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> film_id</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><p>这里，为了让所有分页的顺序一致，我们使用 <code>ORDER BY film_id</code> 让影片按照 <code>film_id</code> 排序，并使用 <code>FETCH FIRST 10 ROWS ONLY</code> 限制了此查询最多返回 10 行。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">film_id |      title       | release_year</span></span>
<span class="line"><span style="color:#A6ACCD;">---------+------------------+--------------</span></span>
<span class="line"><span style="color:#A6ACCD;">       1 | ACADEMY DINOSAUR |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       2 | ACE GOLDFINGER   |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       3 | ADAPTATION HOLES |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       4 | AFFAIR PREJUDICE |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       5 | AFRICAN EGG      |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       6 | AGENT TRUMAN     |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       7 | AIRPLANE SIERRA  |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       8 | AIRPORT POLLOCK  |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">       9 | ALABAMA DEVIL    |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      10 | ALADDIN CALENDAR |         2006</span></span></code></pre></div><p>为了获取第二页要显示的 10 行，我们使用 <code>OFFSET 10</code> 子句跳过第一页的 10 行，并使用 <code>FETCH FIRST 10 ROWS ONLY</code> 限制了此查询最多返回 10 行。您可以使用如下的语句获取第二页的所有行：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span></span>
<span class="line"><span style="color:#A6ACCD;">  film_id,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title,</span></span>
<span class="line"><span style="color:#A6ACCD;">  release_year</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> film_id</span></span>
<span class="line"><span style="color:#A6ACCD;">OFFSET </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">film_id |        title        | release_year</span></span>
<span class="line"><span style="color:#A6ACCD;">---------+---------------------+--------------</span></span>
<span class="line"><span style="color:#A6ACCD;">      11 | ALAMO VIDEOTAPE     |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      12 | ALASKA PHANTOM      |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      13 | ALI FOREVER         |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      14 | ALICE FANTASIA      |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      15 | ALIEN CENTER        |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      16 | ALLEY EVOLUTION     |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      17 | ALONE TRIP          |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      18 | ALTER VICTORY       |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      19 | AMADEUS HOLY        |         2006</span></span>
<span class="line"><span style="color:#A6ACCD;">      20 | AMELIE HELLFIGHTERS |         2006</span></span></code></pre></div><p>同样的，您可以使用如下的语句获取第三页的所有行：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span></span>
<span class="line"><span style="color:#A6ACCD;">  film_id,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title,</span></span>
<span class="line"><span style="color:#A6ACCD;">  release_year</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> film</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> film_id</span></span>
<span class="line"><span style="color:#A6ACCD;">OFFSET </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#F78C6C;">FETCH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FIRST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">ROWS</span><span style="color:#A6ACCD;"> ONLY;</span></span></code></pre></div><p>这里，我们使用 <code>OFFSET 20</code> 指示了跳过前两页的 20 行，并使用 <code>FETCH FIRST 10 ROWS ONLY</code> 限制了此查询最多返回 10 行。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>在本文中，您学习了如何使用 PostgreSQL <code>FETCH</code> 子句限制 <code>SELECT</code> 语句返回的行数。</p><ol><li><code>FETCH</code> 子句和 <code>ORDER BY</code> 子句用于解决 TOP N 问题。</li><li><code>FETCH</code> 子句，<code>OFFSET</code> 子句和 <code>ORDER BY</code> 子句用于解决分页查询问题。</li></ol>`,51),o=[e];function c(t,C,r,i,A,d){return a(),n("div",null,o)}const E=s(p,[["render",c]]);export{F as __pageData,E as default};
